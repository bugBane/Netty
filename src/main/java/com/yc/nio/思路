NIO三大核心原理：Selector、Channel、Buffer
关系图：
                         Thread
                           |
                        Selector
                           |
               -------------------------
               |           |           |
selectionKey(Channel     Channel     Channel
               |           |           |
             Buffer      Buffer      Buffer
               |           |           |
             程序)         程序        程序
说明：
    1)一个Channel对应一个Buffer
    2)一个Selector对应一个线程，一个线程对应多个Channel(连接)
    3)该图反应了有三个Channel注册到该Selector
    4)程序切换到哪个Channel是由事件决定的，Event就是一个重要的概念
    5)Selector会根据不同的事件在各个通道上切换
    6)Buffer是一个内存块，底层是一个数组
    7)数据的读取写入是通过Buffer，BIO中要么是输入流要么是输出流，不能双向，但是NIO的Buffer是可以读也可以写，需要flip方法切换
    8)Channel是双向的，可以返回底层操作系统的情况，比如Linux，底层的操作系统通道就是双向的
注意：可以监听四种不同类型的事件：Connect、Accept、Read、Write。
　　Connect：成功连接到另一个服务器称为“连接就绪”；
　　Accept：ServerSocketChannel准备好接收新进入的连接称为“接收就绪”；
　　Read：有数据可读的通道称为“读就绪”；
　　Write：等待写数据的通道称为“写就绪”；
    一个SelectionKey键表示了一个特定的通道对象和一个特定的选择器对象之间的注册关系。

扩展：RandomAccessFile
1.简介：
    RandomAccessFile既可以读取文件内容，也可以向文件输出数据。同时，RandomAccessFile支持“随机访问”的方式，程序快可以直接跳转到文件的任意地方来读写数据。
    由于RandomAccessFile可以自由访问文件的任意位置，所以如果需要访问文件的部分内容，而不是把文件从头读到尾，使用RandomAccessFile将是更好的选择。
    与OutputStream、Writer等输出流不同的是，RandomAccessFile允许自由定义文件记录指针，RandomAccessFile可以不从开始的地方开始输出，因此RandomAccessFile可以向已存在的文件后追加内容。如果程序需要向已存在的文件后追加内容，则应该使用RandomAccessFile。
    RandomAccessFile的方法虽然多，但它有一个最大的局限，就是只能读写文件，不能读写其他IO节点。
    *RandomAccessFile的一个重要使用场景就是网络请求中的多线程下载及断点续传。
2.方法：
1)RandomAccessFile的构造函数：
RandomAccessFile类有两个构造函数，其实这两个构造函数基本相同，只不过是指定文件的形式不同——一个需要使用String参数来指定文件名，一个使用File参数来指定文件本身。除此之外，创建RandomAccessFile对象时还需要指定一个mode参数，该参数指定RandomAccessFile的访问模式，一共有4种模式。
    "r" : 以只读方式打开。调用结果对象的任何 write 方法都将导致抛出 IOException。
    "rw": 打开以便读取和写入。
    "rws": 打开以便读取和写入。相对于 "rw"，"rws" 还要求对“文件的内容”或“元数据”的每个更新都同步写入到基础存储设备。
    "rwd" : 打开以便读取和写入，相对于 "rw"，"rwd" 还要求对“文件的内容”的每个更新都同步写入到基础存储设备。
2)RandomAccessFile的重要方法
    RandomAccessFile既可以读文件，也可以写文件，所以类似于InputStream的read()方法，以及类似于OutputStream的write()方法，RandomAccessFile都具备。除此之外，RandomAccessFile具备两个特有的方法，来支持其随机访问的特性。
    RandomAccessFile对象包含了一个记录指针，用以标识当前读写处的位置，当程序新创建一个RandomAccessFile对象时，该对象的文件指针记录位于文件头（也就是0处），当读/写了n个字节后，文件记录指针将会后移n个字节。
    除此之外，RandomAccessFile还可以自由移动该记录指针。下面就是RandomAccessFile具有的两个特殊方法，来操作记录指针，实现随机访问：
        long getFilePointer( )：返回文件记录指针的当前位置
        void seek(long pos )：将文件指针定位到pos位置
3.RandomAccessFile的使用
    当RandomAccessFile向指定文件中插入内容时，将会覆盖掉原有内容。如果不想覆盖掉，则需要将原有内容先读取出来，然后先把插入内容插入后再把原有内容追加到插入内容后。

NIO服务器
代码图解：
                    Thread
                       |
                    Selector
                       |
          ---------------------------------
          |             |                 |
  ServerSocketChannel   SocketChannel     SocketChannel
  (selectionKey)        (selectionKey)    (selectionKey)